In the previous example, each MyButton had its own independent count, and when each button was clicked, only the
 count for the button clicked changed:
 -->Initially, each MyButton’s count state is 0
 -->The first MyButton updates its count to 1
 However, often you’ll need components to share data and always update together.
 To make both MyButton components display the same count and update together, you need to move the state from the 
 individual buttons “upwards” to the closest component containing all of them.
 --> Initially, MyApp’s count state is 0 and is passed down to both children
 -->On click, MyApp updates its count state to 1 and passes it down to both children
 Now when you click either button, the count in MyApp will change, which will change both of the counts in MyButton. Here’s how you can express this in code.

First, move the state up from MyButton into MyApp: